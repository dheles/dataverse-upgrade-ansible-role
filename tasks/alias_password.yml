---
- name: create password file
  copy:
    content: "AS_ADMIN_ALIASPASSWORD={{ value }}"
    dest: "{{ dvu_working_dir }}/{{ option | replace('.','_') }}_alias.txt"
    mode: "u=rw,og-rwx"
    owner: "{{ dataverse.glassfish.user }}"
    group: "{{ dataverse.glassfish.user }}"

- name: "delete existing password alias for {{ option }}"
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ dataverse.glassfish.root }}/bin/asadmin delete-password-alias {{ option | replace('.','_') }}_alias"
  no_log: "{{ not dvu_debugging }}"
  failed_when: false

- name: create password alias for {{ option }}"
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ dataverse.glassfish.root }}/bin/asadmin create-password-alias --passwordfile {{ dvu_working_dir }}/{{ option | replace('.','_') }}_alias.txt {{ option | replace('.','_') }}_alias"
  no_log: "{{ not dvu_debugging }}"

- name: remove password file
  file:
    dest: "{{ dvu_working_dir }}/{{ option | replace('.','_') }}_alias.txt"
    state: absent

- name: "confirm alias for {{ option}}"
  become_user: "{{ dataverse.glassfish.user }}"
  shell: "{{ dataverse.glassfish.root }}/bin/asadmin list-password-aliases"
  register: aliases_result
  failed_when: "'{{ option | replace('.','_') }}_alias' not in aliases_result.stdout"

# NOTE: avoid option: "{{ option }}" loop in the update options task
- set_fact:
    aliased_option: "{{ option }}"

- name: update dataverse options
  include: "update_option.yml"
  vars:
    option:   "{{ aliased_option }}"
    value:    "${ALIAS={{ option | replace('.','_') }}_alias}"
